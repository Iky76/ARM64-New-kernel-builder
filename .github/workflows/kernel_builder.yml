name: 🌟 Start Your Kernel

on:
  workflow_dispatch:
    inputs:
      kernel_source:
        description: '🌐 Kernel source repo'
        required: true
        default: 'https://github.com/lynxprjkt/android_kernel_xiaomi_begonia'
      kernel_branch:
        description: '🌿 Kernel branch'
        required: true
        default: 'main'
      defconfig_name:
        description: '🛠️ Defconfig (ex: begonia_user_defconfig)'
        required: true
        default: 'begonia_user_defconfig'
      use_anykernel:
        description: '📦 Use AnyKernel packaging? (yes / no)'
        required: true
        default: 'yes'
      anykernel_source:
        description: '🔗 AnyKernel source repo'
        required: false
        default: 'https://github.com/lynxprjkt/AnyKernel3'
      anykernel_branch:
        description: '🧵 AnyKernel branch'
        required: false
        default: 'main'
      output_name:
        description: '🧃 Output ZIP name (auto-timestamp recommended)'
        required: true
        default: 'axira_begonia-${{ github.run_id }}'
      workspace_name:
        description: '📁 Workspace folder name'
        required: true
        default: 'lynxworkspace'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUILD_USER: lynxdev
      BUILD_HOST: ${{ github.event.inputs.workspace_name }}

    steps:
      - name: 📥 Checkout Repo
        uses: actions/checkout@v4

      - name: ⚙️ Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential bc libncurses-dev bison flex libssl-dev libelf-dev curl wget zip git

      - name: 🌀 Pull Lineage Clang Toolchain
        run: |
          git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 aarch64-linux-android-4.9
          git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 arm-linux-androideabi-4.9
          mkdir clang
          curl https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android14-dev/clang-r487747c.tar.gz -RLO
          tar -C clang/ -xf clang-*.tar.gz

      - name: 🌿 Clone Kernel Source
        run: |
          git clone --depth=1 ${{ github.event.inputs.kernel_source }} -b ${{ github.event.inputs.kernel_branch }} ${{ github.event.inputs.workspace_name }}

      - name: 🔨 Build Kernel
        run: |
          export ARCH=arm64
          export SUBARCH=arm64
          export PATH=$GITHUB_WORKSPACE/clang/bin:$PATH
          export CROSS_COMPILE=$GITHUB_WORKSPACE/aarch64-linux-android-4.9/bin/aarch64-linux-android-
          export CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/arm-linux-androideabi-4.9/bin/arm-linux-androideabi-
          export CLANG_TRIPLE=aarch64-linux-gnu-
          export KBUILD_BUILD_USER=${{ env.BUILD_USER }}
          export KBUILD_BUILD_HOST=${{ env.BUILD_HOST }}
          cd ${{ github.event.inputs.workspace_name }}
          make O=out ${{ github.event.inputs.defconfig_name }}
          make -j$(nproc) O=out

      - name: 📦 Package Kernel with AnyKernel (Conditional)
        if: ${{ github.event.inputs.use_anykernel == 'yes' }}
        run: |
          git clone --depth=1 ${{ github.event.inputs.anykernel_source }} -b ${{ github.event.inputs.anykernel_branch }} AnyKernel3
          rm -rf AnyKernel3/.git AnyKernel3/.github AnyKernel3/LICENSE AnyKernel3/README.md
          if [[ -f out/arch/arm64/boot/Image.gz-dtb ]]; then
            cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/Image.gz-dtb
          elif [[ -f out/arch/arm64/boot/Image-dtb ]]; then
            cp out/arch/arm64/boot/Image-dtb AnyKernel3/Image-dtb
          elif [[ -f out/arch/arm64/boot/Image.gz ]]; then
            cp out/arch/arm64/boot/Image.gz AnyKernel3/Image.gz
          elif [[ -f out/arch/arm64/boot/Image ]]; then
            cp out/arch/arm64/boot/Image AnyKernel3/Image
          fi
          if [[ -f out/arch/arm64/boot/dtbo.img ]]; then
            cp out/arch/arm64/boot/dtbo.img AnyKernel3/dtbo.img
          fi
          cd AnyKernel3
          zip -r9 ${{ github.event.inputs.output_name }}.zip * -x "*.git*" "*.md" "LICENSE" ".github/*"

      - name: 📤 Upload Flashable ZIP
        uses: actions/upload-artifact@v4
        with:
          name: Flashable-Kernel
          path: AnyKernel3/${{ github.event.inputs.output_name }}.zip
